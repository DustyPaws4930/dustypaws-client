{"ast":null,"code":"import { Buffer } from \"buffer\";\nimport { Readable } from \"stream\";\nimport { getChunkBuffer } from \"./chunks/getChunkBuffer\";\nimport { getChunkStream } from \"./chunks/getChunkStream\";\nimport { getDataReadable } from \"./chunks/getDataReadable\";\nimport { getDataReadableStream } from \"./chunks/getDataReadableStream\";\nexport var getChunk = function getChunk(data, partSize) {\n  if (data instanceof Buffer) {\n    return getChunkBuffer(data, partSize);\n  } else if (data instanceof Readable) {\n    return getChunkStream(data, partSize, getDataReadable);\n  } else if (data instanceof String || typeof data === \"string\" || data instanceof Uint8Array) {\n    return getChunkBuffer(Buffer.from(data), partSize);\n  }\n\n  if (typeof data.stream === \"function\") {\n    return getChunkStream(data.stream(), partSize, getDataReadableStream);\n  } else if (data instanceof ReadableStream) {\n    return getChunkStream(data, partSize, getDataReadableStream);\n  } else {\n    throw new Error(\"Body Data is unsupported format, expected data to be one of: string | Uint8Array | Buffer | Readable | ReadableStream | Blob;.\");\n  }\n};","map":{"version":3,"names":["Buffer","Readable","getChunkBuffer","getChunkStream","getDataReadable","getDataReadableStream","getChunk","data","partSize","String","Uint8Array","from","stream","ReadableStream","Error"],"sources":["C:/Users/param/OneDrive/Documents/sem3/client/node_modules/@aws-sdk/lib-storage/dist-es/chunker.js"],"sourcesContent":["import { Buffer } from \"buffer\";\nimport { Readable } from \"stream\";\nimport { getChunkBuffer } from \"./chunks/getChunkBuffer\";\nimport { getChunkStream } from \"./chunks/getChunkStream\";\nimport { getDataReadable } from \"./chunks/getDataReadable\";\nimport { getDataReadableStream } from \"./chunks/getDataReadableStream\";\nexport var getChunk = function (data, partSize) {\n    if (data instanceof Buffer) {\n        return getChunkBuffer(data, partSize);\n    }\n    else if (data instanceof Readable) {\n        return getChunkStream(data, partSize, getDataReadable);\n    }\n    else if (data instanceof String || typeof data === \"string\" || data instanceof Uint8Array) {\n        return getChunkBuffer(Buffer.from(data), partSize);\n    }\n    if (typeof data.stream === \"function\") {\n        return getChunkStream(data.stream(), partSize, getDataReadableStream);\n    }\n    else if (data instanceof ReadableStream) {\n        return getChunkStream(data, partSize, getDataReadableStream);\n    }\n    else {\n        throw new Error(\"Body Data is unsupported format, expected data to be one of: string | Uint8Array | Buffer | Readable | ReadableStream | Blob;.\");\n    }\n};\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,QAAT,QAAyB,QAAzB;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SAASC,qBAAT,QAAsC,gCAAtC;AACA,OAAO,IAAIC,QAAQ,GAAG,SAAXA,QAAW,CAAUC,IAAV,EAAgBC,QAAhB,EAA0B;EAC5C,IAAID,IAAI,YAAYP,MAApB,EAA4B;IACxB,OAAOE,cAAc,CAACK,IAAD,EAAOC,QAAP,CAArB;EACH,CAFD,MAGK,IAAID,IAAI,YAAYN,QAApB,EAA8B;IAC/B,OAAOE,cAAc,CAACI,IAAD,EAAOC,QAAP,EAAiBJ,eAAjB,CAArB;EACH,CAFI,MAGA,IAAIG,IAAI,YAAYE,MAAhB,IAA0B,OAAOF,IAAP,KAAgB,QAA1C,IAAsDA,IAAI,YAAYG,UAA1E,EAAsF;IACvF,OAAOR,cAAc,CAACF,MAAM,CAACW,IAAP,CAAYJ,IAAZ,CAAD,EAAoBC,QAApB,CAArB;EACH;;EACD,IAAI,OAAOD,IAAI,CAACK,MAAZ,KAAuB,UAA3B,EAAuC;IACnC,OAAOT,cAAc,CAACI,IAAI,CAACK,MAAL,EAAD,EAAgBJ,QAAhB,EAA0BH,qBAA1B,CAArB;EACH,CAFD,MAGK,IAAIE,IAAI,YAAYM,cAApB,EAAoC;IACrC,OAAOV,cAAc,CAACI,IAAD,EAAOC,QAAP,EAAiBH,qBAAjB,CAArB;EACH,CAFI,MAGA;IACD,MAAM,IAAIS,KAAJ,CAAU,gIAAV,CAAN;EACH;AACJ,CAnBM"},"metadata":{},"sourceType":"module"}